-- Script Generated by MONASH\ramyaj - Apr 14 2015  3:30PM
 
-- Create table for tbl_PatientOperationDeviceDtls
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_PatientOperationDeviceDtls_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_PatientOperationDeviceDtls_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_PatientOperationDeviceDtls_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_PatientOperationDeviceDtls_Audit]
			FROM dbo.[tbl_PatientOperationDeviceDtls] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_PatientOperationDeviceDtls] 
			
		END 
 
-- Create table for tbl_Site
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_Site_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_Site_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_Site_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_Site_Audit]
			FROM dbo.[tbl_Site] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_Site] 
			
		END 
 
-- Create table for tbl_URN
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_URN_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_URN_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_URN_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_URN_Audit]
			FROM dbo.[tbl_URN] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_URN] 
			
		END 
 
-- Create table for tbl_User
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_User_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_User_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_User_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_User_Audit]
			FROM dbo.[tbl_User] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_User] 
			
		END 
 
-- Create table for tbl_Complications
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_Complications_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_Complications_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_Complications_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_Complications_Audit]
			FROM dbo.[tbl_Complications] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_Complications] 
			
		END 
 
-- Create table for tbl_Device
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_Device_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_Device_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_Device_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_Device_Audit]
			FROM dbo.[tbl_Device] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_Device] 
			
		END 
 
-- Create table for tbl_DeviceBrand
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_DeviceBrand_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_DeviceBrand_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_DeviceBrand_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_DeviceBrand_Audit]
			FROM dbo.[tbl_DeviceBrand] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_DeviceBrand] 
			
		END 
 
-- Create table for tbl_FollowUp
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_FollowUp_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_FollowUp_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_FollowUp_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_FollowUp_Audit]
			FROM dbo.[tbl_FollowUp] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_FollowUp] 
			
		END 
 
-- Create table for tbl_HistoryEmail
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_HistoryEmail_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_HistoryEmail_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_HistoryEmail_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_HistoryEmail_Audit]
			FROM dbo.[tbl_HistoryEmail] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_HistoryEmail] 
			
		END 
 
-- Create table for tbl_HistoryExtract
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_HistoryExtract_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_HistoryExtract_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_HistoryExtract_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_HistoryExtract_Audit]
			FROM dbo.[tbl_HistoryExtract] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_HistoryExtract] 
			
		END 
 
-- Create table for tbl_HistoryLogin
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_HistoryLogin_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_HistoryLogin_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_HistoryLogin_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_HistoryLogin_Audit]
			FROM dbo.[tbl_HistoryLogin] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_HistoryLogin] 
			
		END 
 
-- Create table for tbl_IgnorePatients
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_IgnorePatients_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_IgnorePatients_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_IgnorePatients_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_IgnorePatients_Audit]
			FROM dbo.[tbl_IgnorePatients] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_IgnorePatients] 
			
		END 
 
-- Create table for tbl_Patient
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_Patient_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_Patient_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_Patient_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_Patient_Audit]
			FROM dbo.[tbl_Patient] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_Patient] 
			
		END 
 
-- Create table for tbl_PatientComplications
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_PatientComplications_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_PatientComplications_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_PatientComplications_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_PatientComplications_Audit]
			FROM dbo.[tbl_PatientComplications] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_PatientComplications] 
			
		END 
 
-- Create table for tbl_PatientOperation
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_PatientOperation_Audit')
		BEGIN
		  DROP TABLE dbo.[tbl_PatientOperation_Audit] 
		END 


		IF NOT EXISTS(SELECT * FROM
					sys.tables WHERE name = 'tbl_PatientOperation_Audit')
		BEGIN
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			INTO dbo.[tbl_PatientOperation_Audit]
			FROM dbo.[tbl_PatientOperation] 
			UNION ALL
			SELECT TOP 0 CAST(0 as nvarchar(50)) [Action], CAST(0 as nvarchar(50)) [AuditUserName], getdate() [AuditDate],  *
			FROM dbo.[tbl_PatientOperation] 
			
		END 
 
-- Create trigger for tbl_PatientOperationDeviceDtls
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_PatientOperationDeviceDtls_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_PatientOperationDeviceDtls')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_PatientOperationDeviceDtls;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_PatientOperationDeviceDtls]
		on [dbo].[tbl_PatientOperationDeviceDtls] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_PatientOperationDeviceDtls_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_PatientOperationDeviceDtls_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_Site
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_Site_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_Site')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_Site;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_Site]
		on [dbo].[tbl_Site] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER  FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_Site_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_Site_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_URN
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_URN_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_URN')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_URN;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_URN]
		on [dbo].[tbl_URN] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_URN_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_URN_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_User
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_User_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_User')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_User;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_User]
		on [dbo].[tbl_User] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER  FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_User_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_User_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_Complications
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_Complications_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_Complications')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_Complications;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_Complications]
		on [dbo].[tbl_Complications] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_Complications_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_Complications_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_Device
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_Device_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_Device')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_Device;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_Device]
		on [dbo].[tbl_Device] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER  FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_Device_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_Device_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_DeviceBrand
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_DeviceBrand_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_DeviceBrand')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_DeviceBrand;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_DeviceBrand]
		on [dbo].[tbl_DeviceBrand] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_DeviceBrand_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_DeviceBrand_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_FollowUp
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_FollowUp_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_FollowUp')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_FollowUp;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_FollowUp]
		on [dbo].[tbl_FollowUp] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER  FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_FollowUp_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_FollowUp_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_HistoryEmail
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_HistoryEmail_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_HistoryEmail')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_HistoryEmail;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_HistoryEmail]
		on [dbo].[tbl_HistoryEmail] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_HistoryEmail_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_HistoryEmail_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_HistoryExtract
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_HistoryExtract_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_HistoryExtract')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_HistoryExtract;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_HistoryExtract]
		on [dbo].[tbl_HistoryExtract] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_HistoryExtract_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_HistoryExtract_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_HistoryLogin
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_HistoryLogin_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_HistoryLogin')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_HistoryLogin;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_HistoryLogin]
		on [dbo].[tbl_HistoryLogin] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_HistoryLogin_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_HistoryLogin_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_IgnorePatients
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_IgnorePatients_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_IgnorePatients')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_IgnorePatients;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_IgnorePatients]
		on [dbo].[tbl_IgnorePatients] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_IgnorePatients_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_IgnorePatients_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_Patient
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_Patient_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_Patient')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_Patient;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_Patient]
		on [dbo].[tbl_Patient] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER  FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_Patient_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_Patient_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_PatientComplications
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_PatientComplications_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_PatientComplications')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_PatientComplications;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_PatientComplications]
		on [dbo].[tbl_PatientComplications] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_PatientComplications_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_PatientComplications_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
-- Create trigger for tbl_PatientOperation
IF EXISTS(SELECT * FROM
				sys.tables WHERE name = 'tbl_PatientOperation_Audit')
	BEGIN
	IF EXISTS(SELECT * FROM
				sys.triggers  WHERE name = 'updated_Audit_tbl_PatientOperation')
		BEGIN 
			DROP TRIGGER updated_Audit_tbl_PatientOperation;
		END
	END
	GO 
		CREATE trigger [dbo].[updated_Audit_tbl_PatientOperation]
		on [dbo].[tbl_PatientOperation] 
		FOR
		INSERT, UPDATE, DELETE AS
		BEGIN
		
			DECLARE @Action as varchar(50)
					   SET @Action = (CASE WHEN EXISTS(SELECT * FROM INSERTED)
                         AND EXISTS(SELECT * FROM DELETED)
                        THEN 'UPDATE'  -- Set Action to Updated.
                        WHEN EXISTS(SELECT * FROM INSERTED)
                        THEN 'INSERT'  -- Set Action to Insert.
                        WHEN EXISTS(SELECT * FROM DELETED)
                        THEN 'DELETE'  -- Set Action to Deleted.
                        ELSE NULL -- Skip. It may have been a "failed delete".   
						END)
			DECLARE @sUsername varchar(50)
			SELECT @sUsername = SYSTEM_USER  FROM inserted
    
	  IF @Action = 'INSERT' 
			BEGIN
					   INSERT INTO dbo.tbl_PatientOperation_Audit
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM INSERTED
			END
			ELSE
			BEGIN
					   INSERT INTO dbo.tbl_PatientOperation_Audit 
					   SELECT  @Action, ISNULL(@sUsername,SYSTEM_USER) , getdate(), *
					   FROM DELETED
			END		    
					   
	   END
	   GO 
 
